//To run docker 

docker run --user $(id -u):$(id -g) -v --rm --gpus all -it -v /home/spal:/home/spal gromacs-plumed:2024-3_AND_2-9-3 bash


//To run gromacs in the detached mode use


docker run --user $(id -u):$(id -g) --rm --gpus all -dit -v /home/spal/gromacs_md_files:/home/spal/gromacs_md_files -w /home/spal/gromacs_md_files gromacs-plumed:2024-3_AND_2-9-3 bash  -c "source /usr/local/gromacs/bin/GMXRC && gmx_mpi mdrun -deffnm npt"


// To create a tpr file form outsude the docker container

docker run --user $(id -u):$(id -g) --rm --gpus all -it -v /home/spal/gromacs_md_files:/home/spal/gromacs_md_files -w /home/spal/gromacs_md_files gromacs-plumed:2024-3_AND_2-9-3 bash  -c "source /usr/local/gromacs/bin/GMXRC && gmx_mpi grompp -f inputs/md.mdp -c npt.gro -t npt.cpt -p topol.top -o md_0_10.tpr -maxwarn 1"




###############################################################

export OMP_NUM_THREADS=1

mapdir=$(pwd)

create_tpr() {
  echo "Processing directory: $i"
  cd "$i"
  wdir=$(pwd)
  echo ${wdir}
  echo ${mapdir}
  docker run --user $(id -u):$(id -g) --rm --gpus all -it \
    -v ${mapdir}:${mapdir} \
    -w ${wdir} \
    gcr.io/cheminfosolutions-prod-02/gromacs-plumed:2024-3_AND_2-9-3 \
    bash -c "source /usr/local/gromacs/bin/GMXRC && gmx_mpi grompp -f ../md.mdp -c ../config.gro -p ../topol.top -o topol2.tpr"
}

array=(`seq 0 7`)

for i in ${array[@]}
do
  create_tpr &
#  echo $i
done
wait

docker run --user $(id -u):$(id -g) --rm --gpus all -dit \
  -v ${mapdir}:${mapdir} \
  -w ${mapdir} \
  -e OMP_NUM_THREADS=1 \
  gcr.io/cheminfosolutions-prod-02/gromacs-plumed:2024-3_AND_2-9-3 \
  bash -c "source /usr/local/gromacs/bin/GMXRC && export OMP_NUM_THREADS=1 && mpirun -n 8 gmx_mpi mdrun -s topol2.tpr -plumed plumed.dat -pin on -pinoffset 0 -nsteps 25000000 -multidir 0 1 2 3 4 5 6 7 -hrex -replex 10000"

kill_docker_jobs() {
  echo "Killing all Docker-related running processes..."
  # Get PIDs of all docker daemon and containers' processes excluding the grep process itself
  pids=$(ps aux | grep -E 'dockerd|docker' | grep -v grep | awk '{print $2}')
  if [ -n "$pids" ]; then
    echo "Found PIDs to kill: $pids"
    # Force kill the processes
    kill -9 $pids
  else
    echo "No Docker-related processes found to kill."
  fi
}

# Kill any old Docker jobs before starting new ones
kill_docker_jobs



#./run_fes_OneOPES_parallel.sh
~                                     



######################################
 To run GROMACS

#!/bin/bash

GMX_IMG="gcr.io/cheminfosolutions-prod-02/gromacs:2024-3"
TPR="tpr_water_eq.tpr"    # adjust path as needed
JOBS=4
GPUS=4
VCPUS=96
THREADS_PER_JOB=$((VCPUS / JOBS))    # 4 cpu threads/job


for i in $(seq 0 $((JOBS-1))); do
  GPU_IDX=$((i % GPUS))
  echo $GPU_IDX
  OUTDIR="/home/spal/md_$i"
  mkdir -p $OUTDIR
  cp /home/spal/gromacs_md_files/tpr_water_eq.tpr $OUTDIR/
  docker run --rm --user $(id -u):$(id -g) \
  --gpus device=$GPU_IDX -dit \
  -v $OUTDIR:$OUTDIR \
  -w $OUTDIR \
  -e OMP_NUM_THREADS=$THREADS_PER_JOB \
  -e CUDA_VISIBLE_DEVICES=$GPU_IDX \
  $GMX_IMG \
  bash -c "gmx mdrun -s $TPR -deffnm md -ntomp $THREADS_PER_JOB > output.log 2>&1"
#  bash -c "mpirun -np 4 gmx_mpi mdrun -s $TPR -deffnm md_run -ntomp 6 -npme 1 -pin on > output.log 2>&1"
#  bash -c "gmx mdrun -s $TPR -deffnm md_run -ntmpi 4 -ntomp 4 -rcon 0.9 -pin on"
done

wait


#################

#!/bin/bash

GMX_IMG="gromacs_4gpus:2024-3"
TPR="tpr_water_eq.tpr"    # adjust path as needed
JOBS=20
GPUS=4
VCPUS=96
#THREADS_PER_JOB=$((VCPUS / JOBS))    # 4 cpu threads/job
THREADS_PER_JOB=2   # 4 cpu threads/job


for i in $(seq 0 $((JOBS-1))); do
  GPU_IDX=$((i % GPUS))
  echo $GPU_IDX
  OUTDIR="/home/spal/md_$i"
  mkdir -p $OUTDIR
  cp /home/spal/gromacs_md_files/tpr_water_eq.tpr $OUTDIR/

  echo  docker run --rm --user $(id -u):$(id -g) \
  --gpus device=$GPU_IDX -dit \
  -v $OUTDIR:$OUTDIR \
  -w $OUTDIR \
  -e OMP_NUM_THREADS=$THREADS_PER_JOB \
  -e CUDA_VISIBLE_DEVICES=$GPU_IDX \
  $GMX_IMG \
  bash -c "gmx mdrun -s $TPR -deffnm md -ntomp 2 -gpu_id $GPU_IDX > output.log 2>&1"

  docker run --rm --user $(id -u):$(id -g) \
  --gpus device=$GPU_IDX -dit \
  -v $OUTDIR:$OUTDIR \
  -w $OUTDIR \
  -e OMP_NUM_THREADS=$THREADS_PER_JOB \
  -e CUDA_VISIBLE_DEVICES=$GPU_IDX \
  $GMX_IMG \
  bash -c "gmx mdrun -s $TPR -deffnm md -ntomp 2 -gpu_id $GPU_IDX > output.log 2>&1"
#  bash -c "mpirun -np 4 gmx_mpi mdrun -s $TPR -deffnm md_run -ntomp 6 -npme 1 -pin on > output.log 2>&1"
#  bash -c "gmx mdrun -s $TPR -deffnm md_run -ntmpi 4 -ntomp 4 -rcon 0.9 -pin on"
done

wait
